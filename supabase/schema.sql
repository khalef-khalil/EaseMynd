-- Create tables
create table public.questions (
  id bigint generated by default as identity primary key,
  title text not null,
  category text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.principles (
  id bigint generated by default as identity primary key,
  question_id bigint references public.questions(id) on delete cascade,
  title text not null,
  description text,
  examples text,
  status text check (status in ('testing', 'tested')) not null default 'testing',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.habits (
  id bigint generated by default as identity primary key,
  name text not null,
  type text check (type in ('good', 'bad')) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.habit_logs (
  id bigint generated by default as identity primary key,
  habit_id bigint references public.habits(id) on delete cascade,
  status text check (status in ('completed', 'failed')) not null,
  date date not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(habit_id, date)
);

create table public.tasks (
  id bigint generated by default as identity primary key,
  title text not null,
  status text check (status in ('ongoing', 'completed', 'cancelled')) not null default 'ongoing',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  completed_at timestamp with time zone
);

create table public.focus_sessions (
  id bigint generated by default as identity primary key,
  duration_minutes integer not null,
  goal text not null,
  achieved boolean not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security (RLS)
alter table public.questions enable row level security;
alter table public.principles enable row level security;
alter table public.habits enable row level security;
alter table public.habit_logs enable row level security;
alter table public.tasks enable row level security;
alter table public.focus_sessions enable row level security;

-- Create RLS policies (allowing all operations for now)
create policy "Enable all for questions" on public.questions for all using (true);
create policy "Enable all for principles" on public.principles for all using (true);
create policy "Enable all for habits" on public.habits for all using (true);
create policy "Enable all for habit_logs" on public.habit_logs for all using (true);
create policy "Enable all for tasks" on public.tasks for all using (true);
create policy "Enable all for focus_sessions" on public.focus_sessions for all using (true);

-- Create updated_at trigger function
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql security definer;

-- Create updated_at triggers for tables with updated_at column
create trigger handle_updated_at
  before update on public.questions
  for each row
  execute procedure public.handle_updated_at();

create trigger handle_updated_at
  before update on public.principles
  for each row
  execute procedure public.handle_updated_at(); 